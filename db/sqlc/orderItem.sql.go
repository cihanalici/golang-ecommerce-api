// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orderItem.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (order_id, product_variant_id, quantity, price)
VALUES ($1, $2, $3, $4)
RETURNING id, order_id, product_variant_id, quantity, price, created_at, updated_at
`

type CreateOrderItemParams struct {
	OrderID          sql.NullInt32 `json:"order_id"`
	ProductVariantID sql.NullInt32 `json:"product_variant_id"`
	Quantity         int32         `json:"quantity"`
	Price            string        `json:"price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductVariantID,
		arg.Quantity,
		arg.Price,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductVariantID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, id)
	return err
}

const getOrderItemById = `-- name: GetOrderItemById :one
SELECT id, order_id, product_variant_id, quantity, price, created_at, updated_at
FROM order_items
WHERE id = $1
`

func (q *Queries) GetOrderItemById(ctx context.Context, id int32) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, getOrderItemById, id)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductVariantID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItemsByOrderId = `-- name: GetOrderItemsByOrderId :many
SELECT id, order_id, product_variant_id, quantity, price, created_at, updated_at
FROM order_items
WHERE order_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type GetOrderItemsByOrderIdParams struct {
	OrderID sql.NullInt32 `json:"order_id"`
	Limit   int32         `json:"limit"`
	Offset  int32         `json:"offset"`
}

func (q *Queries) GetOrderItemsByOrderId(ctx context.Context, arg GetOrderItemsByOrderIdParams) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemsByOrderId, arg.OrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductVariantID,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT id, order_id, product_variant_id, quantity, price, created_at, updated_at
FROM order_items
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrderItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderItems(ctx context.Context, arg ListOrderItemsParams) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, listOrderItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductVariantID,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItem = `-- name: UpdateOrderItem :one
UPDATE order_items
SET order_id = $2, product_variant_id = $3, quantity = $4, price = $5, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, order_id, product_variant_id, quantity, price, created_at, updated_at
`

type UpdateOrderItemParams struct {
	ID               int32         `json:"id"`
	OrderID          sql.NullInt32 `json:"order_id"`
	ProductVariantID sql.NullInt32 `json:"product_variant_id"`
	Quantity         int32         `json:"quantity"`
	Price            string        `json:"price"`
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderItem,
		arg.ID,
		arg.OrderID,
		arg.ProductVariantID,
		arg.Quantity,
		arg.Price,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductVariantID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
