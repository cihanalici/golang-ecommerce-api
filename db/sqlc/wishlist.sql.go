// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: wishlist.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createWishlistItem = `-- name: CreateWishlistItem :one
INSERT INTO wishlist (user_id, product_id)
VALUES ($1, $2)
RETURNING id, user_id, product_id, created_at, updated_at
`

type CreateWishlistItemParams struct {
	UserID    sql.NullInt32 `json:"user_id"`
	ProductID sql.NullInt32 `json:"product_id"`
}

func (q *Queries) CreateWishlistItem(ctx context.Context, arg CreateWishlistItemParams) (Wishlist, error) {
	row := q.db.QueryRowContext(ctx, createWishlistItem, arg.UserID, arg.ProductID)
	var i Wishlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWishlistItem = `-- name: DeleteWishlistItem :exec
DELETE FROM wishlist
WHERE id = $1
`

func (q *Queries) DeleteWishlistItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWishlistItem, id)
	return err
}

const getWishlistItemById = `-- name: GetWishlistItemById :one
SELECT id, user_id, product_id, created_at, updated_at
FROM wishlist
WHERE id = $1
`

func (q *Queries) GetWishlistItemById(ctx context.Context, id int32) (Wishlist, error) {
	row := q.db.QueryRowContext(ctx, getWishlistItemById, id)
	var i Wishlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWishlistItemsByUserId = `-- name: GetWishlistItemsByUserId :many
SELECT id, user_id, product_id, created_at, updated_at
FROM wishlist
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type GetWishlistItemsByUserIdParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) GetWishlistItemsByUserId(ctx context.Context, arg GetWishlistItemsByUserIdParams) ([]Wishlist, error) {
	rows, err := q.db.QueryContext(ctx, getWishlistItemsByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wishlist{}
	for rows.Next() {
		var i Wishlist
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWishlistItems = `-- name: ListWishlistItems :many
SELECT id, user_id, product_id, created_at, updated_at
FROM wishlist
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListWishlistItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWishlistItems(ctx context.Context, arg ListWishlistItemsParams) ([]Wishlist, error) {
	rows, err := q.db.QueryContext(ctx, listWishlistItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wishlist{}
	for rows.Next() {
		var i Wishlist
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWishlistItem = `-- name: UpdateWishlistItem :one
UPDATE wishlist
SET user_id = $2, product_id = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, product_id, created_at, updated_at
`

type UpdateWishlistItemParams struct {
	ID        int32         `json:"id"`
	UserID    sql.NullInt32 `json:"user_id"`
	ProductID sql.NullInt32 `json:"product_id"`
}

func (q *Queries) UpdateWishlistItem(ctx context.Context, arg UpdateWishlistItemParams) (Wishlist, error) {
	row := q.db.QueryRowContext(ctx, updateWishlistItem, arg.ID, arg.UserID, arg.ProductID)
	var i Wishlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
