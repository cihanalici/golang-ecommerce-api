// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: productVariant.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createProductVariant = `-- name: CreateProductVariant :one
INSERT INTO product_variants (product_id, color, size, stock, price)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, product_id, color, size, stock, price, created_at, updated_at
`

type CreateProductVariantParams struct {
	ProductID sql.NullInt32 `json:"product_id"`
	Color     string        `json:"color"`
	Size      string        `json:"size"`
	Stock     int32         `json:"stock"`
	Price     string        `json:"price"`
}

func (q *Queries) CreateProductVariant(ctx context.Context, arg CreateProductVariantParams) (ProductVariant, error) {
	row := q.db.QueryRowContext(ctx, createProductVariant,
		arg.ProductID,
		arg.Color,
		arg.Size,
		arg.Stock,
		arg.Price,
	)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Color,
		&i.Size,
		&i.Stock,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductVariant = `-- name: DeleteProductVariant :exec
DELETE FROM product_variants
WHERE id = $1
`

func (q *Queries) DeleteProductVariant(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProductVariant, id)
	return err
}

const getProductVariantById = `-- name: GetProductVariantById :one
SELECT id, product_id, color, size, stock, price, created_at, updated_at
FROM product_variants
WHERE id = $1
`

func (q *Queries) GetProductVariantById(ctx context.Context, id int32) (ProductVariant, error) {
	row := q.db.QueryRowContext(ctx, getProductVariantById, id)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Color,
		&i.Size,
		&i.Stock,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProductVariants = `-- name: ListProductVariants :many
SELECT id, product_id, color, size, stock, price, created_at, updated_at
FROM product_variants
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductVariantsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductVariants(ctx context.Context, arg ListProductVariantsParams) ([]ProductVariant, error) {
	rows, err := q.db.QueryContext(ctx, listProductVariants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductVariant{}
	for rows.Next() {
		var i ProductVariant
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Color,
			&i.Size,
			&i.Stock,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductVariant = `-- name: UpdateProductVariant :one
UPDATE product_variants
SET product_id = $2, color = $3, size = $4, stock = $5, price = $6, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, product_id, color, size, stock, price, created_at, updated_at
`

type UpdateProductVariantParams struct {
	ID        int32         `json:"id"`
	ProductID sql.NullInt32 `json:"product_id"`
	Color     string        `json:"color"`
	Size      string        `json:"size"`
	Stock     int32         `json:"stock"`
	Price     string        `json:"price"`
}

func (q *Queries) UpdateProductVariant(ctx context.Context, arg UpdateProductVariantParams) (ProductVariant, error) {
	row := q.db.QueryRowContext(ctx, updateProductVariant,
		arg.ID,
		arg.ProductID,
		arg.Color,
		arg.Size,
		arg.Stock,
		arg.Price,
	)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Color,
		&i.Size,
		&i.Stock,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
