// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sale.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createSale = `-- name: CreateSale :one
INSERT INTO sales (month, year, total_sales)
VALUES ($1, $2, $3)
RETURNING id, month, year, total_sales, created_at, updated_at
`

type CreateSaleParams struct {
	Month      sql.NullInt32  `json:"month"`
	Year       sql.NullInt32  `json:"year"`
	TotalSales sql.NullString `json:"total_sales"`
}

func (q *Queries) CreateSale(ctx context.Context, arg CreateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, createSale, arg.Month, arg.Year, arg.TotalSales)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.Month,
		&i.Year,
		&i.TotalSales,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSale = `-- name: DeleteSale :exec
DELETE FROM sales
WHERE id = $1
`

func (q *Queries) DeleteSale(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSale, id)
	return err
}

const getSaleById = `-- name: GetSaleById :one
SELECT id, month, year, total_sales, created_at, updated_at
FROM sales
WHERE id = $1
`

func (q *Queries) GetSaleById(ctx context.Context, id int32) (Sale, error) {
	row := q.db.QueryRowContext(ctx, getSaleById, id)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.Month,
		&i.Year,
		&i.TotalSales,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSales = `-- name: ListSales :many
SELECT id, month, year, total_sales, created_at, updated_at
FROM sales
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSalesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSales(ctx context.Context, arg ListSalesParams) ([]Sale, error) {
	rows, err := q.db.QueryContext(ctx, listSales, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Sale{}
	for rows.Next() {
		var i Sale
		if err := rows.Scan(
			&i.ID,
			&i.Month,
			&i.Year,
			&i.TotalSales,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSale = `-- name: UpdateSale :one
UPDATE sales
SET month = $2, year = $3, total_sales = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, month, year, total_sales, created_at, updated_at
`

type UpdateSaleParams struct {
	ID         int32          `json:"id"`
	Month      sql.NullInt32  `json:"month"`
	Year       sql.NullInt32  `json:"year"`
	TotalSales sql.NullString `json:"total_sales"`
}

func (q *Queries) UpdateSale(ctx context.Context, arg UpdateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, updateSale,
		arg.ID,
		arg.Month,
		arg.Year,
		arg.TotalSales,
	)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.Month,
		&i.Year,
		&i.TotalSales,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
